# -*- coding: utf-8 -*-
"""FrecuenciasYmedidas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/165fNTPOAu3c3fOEm8zX0a0-j291rSHTD
"""

import pandas as pd

datos = pd.read_csv('datos.csv')

datos.sample(7)

sorted(datos['Años de Estudio'].unique())

sorted(datos['Sexo'].unique())

sorted(datos['Color'].unique())

sorted(datos['Ciudad'].unique())

datos.Edad.min()

datos.Edad.max()

print(f"La edad minima es {datos.Edad.min()} y la edad máxima es {datos.Edad.max()}")

print(f"La altura minima es {datos['Altura'].min()} cms y la edad máxima es {datos['Altura'].max()} cms")

"""##distribuicion de frecuencias para variables cualitativas

"""

datos.Sexo.value_counts()

datos.Sexo.value_counts(normalize=True).round(4)*100

frecuencia_sexo = datos.Sexo.value_counts()
frecuencia_sexo

porcentaje_sexo = datos.Sexo.value_counts(normalize=True).round(4)*100
porcentaje_sexo

dist_frec_cualitativa = pd.DataFrame({'Frecuencia': frecuencia_sexo, 'Porcentaje %': porcentaje_sexo})
dist_frec_cualitativa



dist_frec_cualitativa.rename(index = {0:'Masculino', 1:'Femenino'}, implace=True)

dist_frec_cualitativa.rename_axis('Sexo', axis='columns', inplace=True)
dist_frec_cualitativa

frecuencia = pd.crosstab(datos.Sexo,
            datos.Color)
frecuencia

sexo = {0: 'Masculino',
        1: 'Femenino'}
color = {0: 'Indigena',
         2: 'Blanco',
         4: 'Negro',
         6: 'Amarillo',
         8: 'Pardo',
         9: 'Sin Declarar'}

frecuencia.rename(index = sexo,inplace=True)
frecuencia.rename(columns = color,inplace=True)
frecuencia

porcentaje = pd.crosstab(datos.Sexo,
                         datos.Color,
                         aggfunc = 'mean',
                         values = datos.Ingreso)
porcentaje.rename(index = sexo,inplace = True)
porcentaje.rename(columns = color,inplace = True)
porcentaje

"""##especificar los limites de cada clase"""

datos.Ingreso.min()

datos.Ingreso.max()

clases = [0,1576,3152,7880,15760,200000]

label = ['E','D','C','B','A']

"""##crear tabla de frecuencias"""

frecuencia = pd.value_counts(
                    pd.cut(x = datos.Ingreso,
                    bins = clases,
                    labels = label,
                    include_lowest = True))
frecuencia

porcentaje = pd.value_counts(
                    pd.cut(x = datos.Ingreso,
                    bins = clases,
                    labels = label,
                    include_lowest = True),
                    normalize=True)*100
porcentaje

dist_frec_cuant_perzonalizada = pd.DataFrame({'Frecuencia': frecuencia, 'Porcentaje %': porcentaje})
dist_frec_cuant_perzonalizada.sort_index(ascending=False)

import numpy as np

n = datos.shape[0]

k = 1 + (10/3) * np.log10(n)
k

frecuencia_sturges = pd.value_counts(
                    pd.cut(x = datos.Ingreso,
                    bins = 17,
                    include_lowest = True))
frecuencia_sturges

porcentaje_sturges = pd.value_counts(
                    pd.cut(x = datos.Ingreso,
                    bins = 17,
                    include_lowest = True),
                    sort= False,
                    normalize=True)*100
porcentaje_sturges

dist_frec_cuantitativa_amplitud_fija = pd.DataFrame({'Frecuencia': frecuencia_sturges, 'Porcentaje %': porcentaje_sturges})
dist_frec_cuantitativa_amplitud_fija

"""##histograma"""

import seaborn as sns

ax = sns.distplot(datos.Altura, kde = False)

ax.figure.set_size_inches(12,6)
ax.set_title('Distribución de frecuencia - Altura', fontsize=18)
ax.set_xlabel('Altura (metros)', fontsize=14)
ax

ax = sns.distplot(datos.Altura, kde = True)
ax.figure.set_size_inches(12,6)
ax.set_title('Distribución de frecuencia - Altura', fontsize=18)
ax.set_xlabel('Altura (metros)', fontsize=14)
ax

"""##medida de tendencia central
###media o promedia




"""

import pandas as pd
df = pd.DataFrame(data  = {'María':[8,10,4,8,6,10,8],
                           'Pedro':[10,2,0.5,1,3,9.5,10],
                           'Pablo':[7.5,8,7,8,8,8.5,7]},
                  index = ['Matemática',
                          'Portuges',
                           'Ingles',
                          'Geografía',
                          'Historia',
                          'Fisica',
                          'Quimica'])
df.rename_axis('Asignaturas',axis = 'columns', inplace = True)
df

(8+10+4+8+6+10+8)/7

df['María'].mean()

datos.groupby(['Sexo'])['Ingreso'].mean()

"""##mediana"""

notas_maria = df['María']
notas_maria

notas_maria = notas_maria.sort_values()
notas_maria

n = notas_maria.shape[0]
n

notas_maria = notas_maria.reset_index()
notas_maria

elemento_md = (n+1)/2
elemento_md

notas_maria.loc[elemento_md -1]

notas_maria['María'].median()

notas_pedro = df['Pedro'].sample(6,random_state= 200)
notas_pedro

notas_pedro = notas_pedro.sort_values()
notas_pedro

n = notas_pedro.shape[0]
n

notas_pedro = notas_pedro.reset_index()
notas_pedro

elemento_md = int(n / 2)
elemento_md

(notas_pedro.loc[elemento_md - 1][1] + notas_pedro.loc[elemento_md][1]) /2

datos.Ingreso.median()

"""##la moda"""

df.mode()

ejemplo = pd.Series([1,2,2,3,4,4,5,6,7])
ejemplo

ejemplo.mode()

datos.Ingreso.mode()

datos.Altura.mode()

"""##Relación entre medidas de tendencia central"""

ax = sns.displot(datos.query("Ingreso < 20000").Ingreso)
ax.figure.set_size_inches(12,6)
ax

Moda = datos.Ingreso.mode()[0]
Moda

Mediana = datos.Ingreso.median()
Mediana

Media = datos.Ingreso.mean()
Media

Moda < Mediana < Media

ax = sns.displot(datos.Altura)
ax.figure.set_size_inches(12,6)
ax

Moda = datos.Altura.mode()
Moda

Media = datos.Altura.mean()
Media

Mediana = datos.Altura.median()
Mediana

ax = sns.displot(datos["Años de Estudio"],bins = 17)
ax.figure.set_size_inches(12,6)
ax

Moda = datos["Años de Estudio"].mode()[0]
Moda

Mediana = datos["Años de Estudio"].median()
Mediana

Media = datos["Años de Estudio"].mean()
Media

Moda > Mediana > Media

"""## Definicion de cuartiles, deciles y percentiles"""

datos.Ingreso.quantile ([0.25, 0.5, 0.75])

[i/10 for i in range(1,10)]

datos.Ingreso.quantile ([i/10 for i in range(1,10)])

datos.Ingreso.quantile ([i/100 for i in range(1,100)])

ax = sns.distplot(datos.Edad,
                 hist_kws={'cumulative': True},
                 kde_kws={'cumulative': True},
                 bins = 10)
ax.figure.set_size_inches(14,6)
ax.set_title('Distribucion de Frecuencia Acumulada', fontsize=18)
ax.set_ylabel('Acumulado', fontsize=14)
ax.set_xlabel('Años', fontsize=14)
ax

datos.Edad.quantile ([i/10 for i in range(1,10)])

ax = sns.boxplot(x = 'Altura', data=datos, orient = 'h')

ax.figure.set_size_inches(12,4)
ax.set_title('Altura',fontsize=18)
ax.set_xlabel('Metros',fontsize=14)
ax

ax = sns.boxplot(x = 'Altura', y = 'Sexo', data=datos, orient= 'h')


ax.figure.set_size_inches(12,4)
ax.set_title('Altura',fontsize=18)
ax.set_xlabel('Metros',fontsize=14)
ax

ax = sns.boxplot(x = 'Ingreso', data=datos.query("Ingreso < 10000"), orient = 'h')

ax.figure.set_size_inches(12,4)
ax.set_title('Ingreso',fontsize=18)
ax.set_xlabel('Miles de pesos',fontsize=14)
ax

ax = sns.boxplot(x = 'Ingreso', y = 'Sexo', data=datos.query("Ingreso < 10000"), orient = 'h')

ax.figure.set_size_inches(12,4)
ax.set_title('Ingreso',fontsize=18)
ax.set_xlabel('Miles de pesos',fontsize=14)
ax

ax = sns.boxplot(x = 'Años de Estudio', data=datos, orient= 'h')

ax.figure.set_size_inches(12,4)
ax.set_title('Años de Estudio',fontsize=18)
ax.set_xlabel('Años',fontsize=14)
ax

ax = sns.boxplot(x = 'Años de Estudio', y = 'Sexo',data=datos, orient ='h')

ax.figure.set_size_inches(12,4)
ax.set_title('Años de Estudio',fontsize=18)
ax.set_xlabel('Años',fontsize=14)
ax

"""## Medidas de dispersion"""

df

notas_maria_dispersion = df[['María']]
notas_maria_dispersion

notas_media_maria = notas_maria_dispersion.mean()[0]
notas_media_maria

notas_maria_dispersion['Desviacion'] = notas_maria_dispersion['María'] - notas_media_maria
notas_maria_dispersion

notas_maria_dispersion['|Desviacion|'] = notas_maria_dispersion['Desviacion'].abs()
notas_maria_dispersion

!pip install scipy

import scipy.stats as stats

mad_notas_maria = stats.median_abs_deviation(notas_maria_dispersion['María'])
mad_notas_maria

notas_maria_dispersion['(Desviacion)^2']= notas_maria_dispersion['|Desviacion|'].pow(2)
notas_maria_dispersion

notas_maria_dispersion['(Desviacion)^2'].sum() / (len(notas_maria_dispersion) -1)

notas_maria_dispersion['María'].var()

varianza = notas_maria_dispersion['María'].var()
varianza

np.sqrt(varianza)

desviacion_estandar = notas_maria_dispersion['María'].std()
desviacion_estandar

df.mean()

df.median()

df.mode()

df.std()

